<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Liu</title>
  <subtitle>Write the Code. Change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ltx.host/"/>
  <updated>2017-02-10T02:26:32.000Z</updated>
  <id>http://ltx.host/</id>
  
  <author>
    <name>Mr.Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS中float、double类型直接计算导致精度不准确问题</title>
    <link href="http://ltx.host/20170210/NSDecimalNumber/"/>
    <id>http://ltx.host/20170210/NSDecimalNumber/</id>
    <published>2017-02-10T01:50:51.000Z</published>
    <updated>2017-02-10T02:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>做金融类App开发，经常涉及到Money的计算问题，特别是在算利息这种情况时会遇到除不尽导致小数位数过多的问题。</p>
</blockquote>
<a id="more"></a>
<h1 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    //申请提现金额</div><div class="line">    double balance =  [_withDrawView.balanceField.text doubleValue];</div><div class="line">    //手续费</div><div class="line">    double  brokerage = 1.00;</div><div class="line">    //预计到账金额 (申请提现金额 - 手续费)</div><div class="line">    double finalBalance = balance -brokerage;</div><div class="line"></div><div class="line">    //提交需要转成NSNumber</div><div class="line">     NSNumber  *b =  [NSNumber numberWithDouble:balance];</div><div class="line">     NSNumber  *fb =  [NSNumber numberWithDouble:finalBalance];</div><div class="line"></div><div class="line">    DLog(@&quot;申请金额:%@   预计到账金额:%@&quot;,b, fb);</div><div class="line"></div><div class="line">// 输入金额为10.21后输出结果    申请金额:10.21   预计到账金额:9.210000000000001</div></pre></td></tr></table></figure>
<p>可以看到，经过计算的金额转成NSNumber类型后精度不准确，这不是我们想要的结果！</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//        //申请提现金额</div><div class="line">//   NSDecimalNumber *balance = [NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%@&quot;, _withDrawView.balanceField.text]];</div><div class="line">//        //手续费</div><div class="line">//    NSDecimalNumber* brokerage = [NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%f&quot;,1.00]];</div><div class="line">//        //预计到账金额 (申请提现金额 - 手续费)</div><div class="line">//    NSDecimalNumber* finalBalance = [balance decimalNumberBySubtracting:brokerage];</div><div class="line">//</div><div class="line">//</div><div class="line">//    DLog(@&quot;申请金额:%@   预计到账金额:%@&quot;,balance, finalBalance);</div><div class="line"></div><div class="line">// 输入金额为10.21后输出结果    申请金额:10.21   预计到账金额:9.21</div></pre></td></tr></table></figure>
<p>这就对了，开发中我们可以把float、double转成NSDecimalNumber类型后再进行+、-、* 、/ 的运算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做金融类App开发，经常涉及到Money的计算问题，特别是在算利息这种情况时会遇到除不尽导致小数位数过多的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://ltx.host/categories/Objective-C/"/>
    
    
      <category term="double计算" scheme="http://ltx.host/tags/double%E8%AE%A1%E7%AE%97/"/>
    
      <category term="精度丢失" scheme="http://ltx.host/tags/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ltx.host/20170209/hello-world/"/>
    <id>http://ltx.host/20170209/hello-world/</id>
    <published>2017-02-09T10:39:27.000Z</published>
    <updated>2017-02-09T10:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Could not get BatchedBridge</title>
    <link href="http://ltx.host/20170208/BatchedBridge/"/>
    <id>http://ltx.host/20170208/BatchedBridge/</id>
    <published>2017-02-08T12:05:41.000Z</published>
    <updated>2017-02-09T15:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Could-not-get-BatchedBridge-make-sure-your-bundle-is-packaged-correctly"><a href="#Could-not-get-BatchedBridge-make-sure-your-bundle-is-packaged-correctly" class="headerlink" title="Could not get BatchedBridge, make sure your bundle is packaged correctly"></a>Could not get BatchedBridge, make sure your bundle is packaged correctly</h1><p>首先在项目的目录android/app/src/main/下面 查看有没有<strong>assets</strong>文件夹，如果没有手动创建一个。<br>然后打开终端 cd到项目根目录执行下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Could-not-get-BatchedBridge-make-sure-your-bundle-is-packaged-correctly&quot;&gt;&lt;a href=&quot;#Could-not-get-BatchedBridge-make-sure-your-bundle
    
    </summary>
    
      <category term="React Native" scheme="http://ltx.host/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://ltx.host/tags/React-Native/"/>
    
      <category term="移动端" scheme="http://ltx.host/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS Runtime 获取成员变量</title>
    <link href="http://ltx.host/20170208/RuntimeGet/"/>
    <id>http://ltx.host/20170208/RuntimeGet/</id>
    <published>2017-02-08T12:05:41.000Z</published>
    <updated>2017-02-09T15:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首先包含runtime头文件"><a href="#首先包含runtime头文件" class="headerlink" title="首先包含runtime头文件"></a>首先包含runtime头文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<p>以UITextField为例</p>
<h2 id="1-遍历所有成员变量"><a href="#1-遍历所有成员变量" class="headerlink" title="1.遍历所有成员变量"></a>1.遍历所有成员变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (void)initialize</div><div class="line">&#123;</div><div class="line">      unsigned int count = 0;</div><div class="line">    </div><div class="line">    // 拷贝出所有的成员变量列表</div><div class="line">    Ivar *ivars = class_copyIvarList([UITextField class], &amp;count);</div><div class="line">    </div><div class="line">    for (int i = 0; i&lt;count; i++) &#123;</div><div class="line">        // 取出成员变量</div><div class="line">        //        Ivar ivar = *(ivars + i);</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        </div><div class="line">        // 打印成员变量名字</div><div class="line">        XMGLog(@&quot;%s %s&quot;, ivar_getName(ivar), ivar_getTypeEncoding(ivar));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 释放</div><div class="line">    free(ivars);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-遍历所有属性"><a href="#2-遍历所有属性" class="headerlink" title="2.遍历所有属性"></a>2.遍历所有属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+ (void)initialize</div><div class="line">&#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    </div><div class="line">    objc_property_t *properties = class_copyPropertyList([UITextField class], &amp;count);</div><div class="line">    </div><div class="line">    for (int i = 0; i&lt;count; i++) &#123;</div><div class="line">        // 取出属性</div><div class="line">        objc_property_t property = properties[i];</div><div class="line">        </div><div class="line">        // 打印属性名字</div><div class="line">        XMGLog(@&quot;%s   &lt;----&gt;   %s&quot;, property_getName(property), property_getAttributes(property));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(properties);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;首先包含runtime头文件&quot;&gt;&lt;a href=&quot;#首先包含runtime头文件&quot; class=&quot;headerlink&quot; title=&quot;首先包含runtime头文件&quot;&gt;&lt;/a&gt;首先包含runtime头文件&lt;/h1&gt;&lt;figure class=&quot;highlight 
    
    </summary>
    
      <category term="Objective-C" scheme="http://ltx.host/categories/Objective-C/"/>
    
    
      <category term="Runtime" scheme="http://ltx.host/tags/Runtime/"/>
    
      <category term="iOS" scheme="http://ltx.host/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift基本语法之闭包</title>
    <link href="http://ltx.host/20170208/SwiftClosures/"/>
    <id>http://ltx.host/20170208/SwiftClosures/</id>
    <published>2017-02-08T12:05:41.000Z</published>
    <updated>2017-02-09T16:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h1 id="闭包的介绍"><a href="#闭包的介绍" class="headerlink" title="闭包的介绍"></a>闭包的介绍</h1><h2 id="闭包和OC中的block非常相似"><a href="#闭包和OC中的block非常相似" class="headerlink" title="闭包和OC中的block非常相似"></a>闭包和OC中的block非常相似</h2><blockquote>
<p>   OC中的block是匿名的函数<br>Swift中的闭包是一个特殊的函数<br>block和闭包都经常用于回调<br>   注意:闭包和block一样,第一次使用时可能不习惯它的语法,可以先按照使用简单的闭包,随着学习的深入,慢慢掌握其灵活的运用方法.</p>
</blockquote>
<h1 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h1><h2 id="block的用法回顾"><a href="#block的用法回顾" class="headerlink" title="block的用法回顾"></a>block的用法回顾</h2><h3 id="定义网络请求的类"><a href="#定义网络请求的类" class="headerlink" title="定义网络请求的类"></a>定义网络请求的类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@interface HttpTool : NSObject</div><div class="line">- (void)loadRequest:(void (^)())callBackBlock;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HttpTool</div><div class="line">- (void)loadRequest:(void (^)())callBackBlock</div><div class="line">&#123;</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;加载网络数据:%@&quot;, [NSThread currentThread]);</div><div class="line"></div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            callBackBlock();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="进行网络请求-请求到数据后利用block进行回调"><a href="#进行网络请求-请求到数据后利用block进行回调" class="headerlink" title="进行网络请求,请求到数据后利用block进行回调"></a>进行网络请求,请求到数据后利用block进行回调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    [self.httpTool loadRequest:^&#123;</div><div class="line">        NSLog(@&quot;主线程中,将数据回调.%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="block写法总结"><a href="#block写法总结" class="headerlink" title="block写法总结:"></a>block写法总结:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">block的写法:</div><div class="line">    类型:</div><div class="line">    返回值(^block的名称)(block的参数)</div><div class="line"></div><div class="line">    值:</div><div class="line">    ^(参数列表) &#123;</div><div class="line">        // 执行的代码</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="使用闭包代替block"><a href="#使用闭包代替block" class="headerlink" title="使用闭包代替block"></a>使用闭包代替block</h2><h3 id="定义网络请求的类-1"><a href="#定义网络请求的类-1" class="headerlink" title="定义网络请求的类"></a>定义网络请求的类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class HttpTool: NSObject &#123;</div><div class="line"></div><div class="line">    func loadRequest(callBack : ()-&gt;())&#123;</div><div class="line">        dispatch_async(dispatch_get_global_queue(0, 0)) &#123; () -&gt; Void in</div><div class="line">            print(&quot;加载数据&quot;, [NSThread.currentThread()])</div><div class="line"></div><div class="line">             dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; Void in</div><div class="line">                callBack()</div><div class="line">             &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="进行网络请求-请求到数据后利用闭包进行回调"><a href="#进行网络请求-请求到数据后利用闭包进行回调" class="headerlink" title="进行网络请求,请求到数据后利用闭包进行回调"></a>进行网络请求,请求到数据后利用闭包进行回调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) &#123;</div><div class="line">    // 网络请求</div><div class="line">    httpTool.loadRequest (&#123; () -&gt; () in</div><div class="line">        print(&quot;回到主线程&quot;, NSThread.currentThread());</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="闭包写法总结"><a href="#闭包写法总结" class="headerlink" title="闭包写法总结:"></a>闭包写法总结:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">闭包的写法:</div><div class="line">    类型:(形参列表)-&gt;(返回值)</div><div class="line">    技巧:初学者定义闭包类型,直接写()-&gt;().再填充参数和返回值</div><div class="line"></div><div class="line">    值:</div><div class="line">    &#123;</div><div class="line">        (形参) -&gt; 返回值类型 in</div><div class="line">        // 执行代码</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="闭包的简写"><a href="#闭包的简写" class="headerlink" title="闭包的简写"></a>闭包的简写</h2><h3 id="如果闭包没有参数-没有返回值-in和in之前的内容可以省略"><a href="#如果闭包没有参数-没有返回值-in和in之前的内容可以省略" class="headerlink" title="如果闭包没有参数,没有返回值.in和in之前的内容可以省略"></a>如果闭包没有参数,没有返回值.in和in之前的内容可以省略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">httpTool.loadRequest(&#123;</div><div class="line">       print(&quot;回到主线程&quot;, NSThread.currentThread());</div><div class="line">   &#125;)</div></pre></td></tr></table></figure>
<h3 id="尾随闭包写法"><a href="#尾随闭包写法" class="headerlink" title="尾随闭包写法:"></a>尾随闭包写法:</h3><blockquote>
<p>如果闭包是函数的最后一个参数,则可以将闭包写在()后面<br>   如果函数只有一个参数,并且这个参数是闭包,那么()可以不写</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">httpTool.loadRequest() &#123;</div><div class="line">    print(&quot;回到主线程&quot;, NSThread.currentThread());</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 开发中建议该写法</div><div class="line">httpTool.loadRequest &#123;</div><div class="line">    print(&quot;回到主线程&quot;, NSThread.currentThread());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包的循环引用"><a href="#闭包的循环引用" class="headerlink" title="闭包的循环引用"></a>闭包的循环引用</h2><blockquote>
<pre><code>•如果在HttpTool中有对闭包进行强引用,则会形成循环引用
 •补充:在Swift中检测一个对象是否销毁,可以实现对象的deinit函数
</code></pre></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 析构函数(相当于OC中dealloc方法)</div><div class="line">   deinit &#123;</div><div class="line">       print(&quot;ViewController----deinit&quot;)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="循环引用的-实现"><a href="#循环引用的-实现" class="headerlink" title="循环引用的(实现)"></a>循环引用的(实现)</h3><blockquote>
<p>该实现是为了产生循环引用,而产生的循环引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class HttpTool: NSObject &#123;</div><div class="line">    // 定义属性,来强引用传入的闭包</div><div class="line">    var callBack : (()-&gt;())?</div><div class="line">   func loadRequest(callBack : ()-&gt;())&#123;</div><div class="line">        dispatch_async(dispatch_get_global_queue(0, 0)) &#123; () -&gt; Void in</div><div class="line">            print(&quot;加载数据&quot;, [NSThread.currentThread()])</div><div class="line"></div><div class="line">             dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; Void in</div><div class="line">                callBack()</div><div class="line">             &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        self.callBack = callBack</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="swift中解决循环引用的方式"><a href="#swift中解决循环引用的方式" class="headerlink" title="swift中解决循环引用的方式"></a>swift中解决循环引用的方式</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一:"></a>方案一:</h4><blockquote>
<p>使用weak,对当前控制器使用弱引用<br>但是因为self可能有值也可能没有值,因此weakSelf是一个可选类型,在真正使用时可以对其强制解包(该处强制解包没有问题,因为控制器一定存在,否则无法调用所在函数)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 解决方案一:</div><div class="line">   weak var weakSelf = self</div><div class="line">   httpTool.loadData &#123;</div><div class="line">       print(&quot;加载数据完成,更新界面:&quot;, NSThread.currentThread())</div><div class="line">       weakSelf!.view.backgroundColor = UIColor.redColor()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二:"></a>方案二:</h4><blockquote>
<pre><code>和方案一类型,只是书写方式更加简单
</code></pre><p>   可以写在闭包中,并且在闭包中用到的self都是弱引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">httpTool.loadData &#123;[weak self] () -&gt; () in</div><div class="line">       print(&quot;加载数据完成,更新界面:&quot;, NSThread.currentThread())</div><div class="line">       self!.view.backgroundColor = UIColor.redColor()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="方案三-常用"><a href="#方案三-常用" class="headerlink" title="方案三:(常用)"></a>方案三:(常用)</h4><blockquote>
<pre><code>◦    使用关键字`unowned`
◦    从行为上来说 unowned 更像OC中的 unsafe_unretained
◦    unowned 表示:即使它原来引用的对象被释放了，仍然会保持对被已经释放了的对象的一个 &quot;无效的&quot; 引用，它不能是 Optional 值，也不会被指向 nil
</code></pre></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">httpTool.loadData &#123;[unowned self] () -&gt; () in</div><div class="line">        print(&quot;加载数据完成,更新界面:&quot;, NSThread.currentThread())</div><div class="line">        self.view.backgroundColor = UIColor.redColor()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h1&gt;&lt;h1 id=&quot;闭包的介绍&quot;&gt;&lt;a href=&quot;#闭包的介绍&quot; class=&quot;headerlink&quot; title=&quot;闭包的介绍&quot;&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://ltx.host/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://ltx.host/tags/Swift/"/>
    
      <category term="闭包" scheme="http://ltx.host/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
</feed>
